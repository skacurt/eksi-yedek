// generated by cursor + claude-3.5-sonnet
// simplified in many iterations, this wasn't how it came out.

import { expect } from 'chai';
import { parse } from '../eksitext-2024.mjs';

describe('Ekşi Sözlük Parser', () => {
  const testCases = [
    {
      name: 'simple gbkz',
      input: '`query`',
      expected: [{ type: 'gbkz', query: 'query' }]
    },
    {
      name: 'gbkz with spaces',
      input: '`query with spaces`',
      expected: [{ type: 'gbkz', query: 'query with spaces' }]
    },
    {
      name: 'simple bkz',
      input: '(bkz: query)',
      expected: [{ type: 'bkz', query: 'query' }]
    },
    {
      name: 'bkz with spaces',
      input: '(bkz: query with spaces)',
      expected: [{ type: 'bkz', query: 'query with spaces' }]
    },
    {
      name: 'abkz with visible and hidden parts',
      input: '`visible:hidden`',
      expected: [{ type: 'abkz', text: 'visible', query: 'hidden' }]
    },
    {
      name: 'abkz with only hidden part',
      input: '`:hidden`',
      expected: [{ type: 'abkz', text: null, query: 'hidden' }]
    },
    {
      name: 'simple URL',
      input: 'https://example.com',
      expected: [{ type: 'url', url: 'https://example.com' }]
    },
    {
      name: 'named URL',
      input: '[https://example.com Example]',
      expected: ['[', { type: 'url', url: 'https://example.com' }, ' Example]']
    },
    {
      name: 'paragraph break',
      input: 'text1\n\ntext2',
      expected: ['text1', { type: 'paragraph_break' }, 'text2']
    },
    {
      name: 'line break',
      input: 'text1\ntext2',
      expected: ['text1', { type: 'line_break' }, 'text2']
    },
    {
      name: 'mixed content',
      input: 'Hello (bkz: world). `gbkz` and [https://example.com Example].\n\nNew paragraph.',
      expected: [
        'Hello ',
        { type: 'bkz', query: 'world' },
        '. ',
        { type: 'gbkz', query: 'gbkz' },
        ' and [',
        { type: 'url', url: 'https://example.com' },
        ' Example].',
        { type: 'paragraph_break' },
        'New paragraph.'
      ]
    }
  ];

  testCases.forEach(({ name, input, expected }) => {
    it(`should parse ${name} correctly`, () => {
      const result = parse(input);
      expect(result).to.deep.equal(expected);
    });
  });
});